/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
https://www.cgtrader.com/free-3d-models/aircraft/helicopter/boeing-sikorsky-rah-66a-comanche-00b8b4af-f529-456e-aa59-2a8ec3a1d2eb
by pjedvaj
*/

import React, { useEffect, useRef, useState } from "react";
import { useGLTF } from "@react-three/drei";
import { CuboidCollider, RigidBody, RoundCuboidCollider, interactionGroups, useFixedJoint, useRevoluteJoint } from "@react-three/rapier";
import { useFrame, useThree } from "@react-three/fiber";
import * as THREE from 'three';
import ChaseCamera from "../ChaseCamera";
import { useKeyboardControls } from "@react-three/drei";

export default function Heli(props) {
  const { nodes, materials } = useGLTF("./Models/Helicopter/heliMod7.glb");

  const rotorRef = useRef()
  const tailRotorRef = useRef()
  const tailRotorMesh = useRef()
  const fuselageRef = useRef()
  const fuselageMeshRef = useRef()

  const [ speed ] = useState((10.5))
  const testMaterial = new THREE.MeshBasicMaterial({color: 0xff0000})
  const glassMaterial = new THREE.MeshStandardMaterial({
    color: 0xfff,
    transparent: true,
    metalness: 0.9,
    roughness: 0.1,
    opacity: 0.1
  })
  
 const rotorJoint = useRevoluteJoint(rotorRef, fuselageRef, [
    [0, 0, 0],
    // Position of the joint in bodyB's local space
    [0, 0, 0],
    // Axis of the joint, expressed in the local-space of
    // the rigid-bodies it is attached to. Cannot be [0,0,0].
    [0, 1, 0]
 ])

 //controls
 const [ subscribeKeys, getKeys ] = useKeyboardControls()

 useFrame((state, delta) => {
  rotorJoint?.current?.configureMotorVelocity(10, 2)

  const time = state.clock.getElapsedTime()
  const rotation = new THREE.Quaternion()
  rotation.setFromEuler(new THREE.Euler(time, 0, 0))
  tailRotorRef?.current?.setNextKinematicRotation(rotation)

  //keys
  const { forward, backward, leftward, rightward, upward, downward } = getKeys()
  // console.log(forward)
  let gravityScale = 1
  if(upward){
    fuselageRef.current.gravityScale = -0.1
    fuselageRef.current.wakeUp()
    console.log(fuselageRef.current.gravityScale)
    console.log('up')
  }
  if(downward){
    fuselageRef.current.gravityScale = 0.1
    console.log('down')
  }


 })

  const tailRotorFuselageJoint = useFixedJoint(fuselageRef, tailRotorRef, [
    [0, 0, 0],
    [0, 0, 0, 1],
    [0, 0, 0],
    [0, 0, 0, 1]
  ])

  const testForce = () => {
    console.log('force applied')
    rotorRef.current.applyImpulse({x: 0, y: 500, z: 0})
  }


  return (
    <group {...props} dispose={null}>
      <RigidBody type={"dyanmic"} colliders={false} ref={fuselageRef} collisionGroups={interactionGroups(0, [1])} gravityScale={1.} mass={10.5} >
        {/* <RoundCuboidCollider position={[0, 1.5, -1.75]} args={[0.5, 1., 5.85, 0.5]}/> */}
        <CuboidCollider position={[0, 1.5, -1.75]} args={[1., 1.5, 5.8]}/>
        <mesh
          ref={fuselageMeshRef}
          onClick={testForce}
          castShadow
          receiveShadow
          geometry={nodes.Fuselage.geometry}
          material={materials.Paint}
          // material={testMaterial}
          position={[0, 0, -1.151]}
        />

        <mesh
          castShadow
          receiveShadow
          geometry={nodes.GlassDoor2.geometry}
          // material={materials.Glass}
          material={glassMaterial}
          position={[0, 0, -1.151]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.GlassDoor1.geometry}
          // material={materials.Glass}
          material={glassMaterial}
          position={[0, 0, -1.151]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Glass.geometry}
          // material={materials.Glass}
          material={glassMaterial}
          position={[0, 0, -1.151]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.WheelR.geometry}
          material={materials.Paint}
          position={[-1.05, 0.308, 1.341]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.RearWheel.geometry}
          material={materials.Paint}
          position={[0, 0.175, -5.809]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.WheelL.geometry}
          material={materials.Paint}
          position={[1.05, 0.308, 1.341]}
        />
      </RigidBody>
      
      
      {/* <mesh
        castShadow
        receiveShadow
        geometry={nodes.Gun.geometry}
        material={materials.Paint}
        position={[0, 0, -1.15]}
      /> */}
      <RigidBody  type="dynamic" colliders="hull" ref={rotorRef} collisionGroups={interactionGroups(0, [1])} restitution={0.8} gravityScale={0.0}>
        <mesh
          // onClick={testForce}
          castShadow
          receiveShadow
          geometry={nodes.BladeBase.geometry}
          material={materials.Paint}
          position={[0.007, 3.172, 0.001]}
        />
      </RigidBody>
      
      <RigidBody type="kinamaticPosition" colliders="hull" ref={tailRotorRef}  collisionGroups={interactionGroups(0, [1])} gravityScale={0.0} >
        <mesh
          ref={tailRotorMesh}
          castShadow
          receiveShadow
          geometry={nodes.TailRotorMast.geometry}
          material={materials.Paint}
          // material={testMaterial}
          position={[0.008, 1.361, -6.788]}
        />
      </RigidBody>
      
      <ChaseCamera object={fuselageMeshRef}/>
    </group>
  );
}

useGLTF.preload("./Models/Helicopter/heliMod7.glb");

