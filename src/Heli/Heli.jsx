
//   const rotorRef = useRef()
//   const bladesRef = useRef()

//   useFrame((state) => {
//     const time = state.clock.getElapsedTime()
//     // console.log(time)
//     const rotation = new THREE.Quaternion()
//     rotation.setFromEuler(new THREE.Euler(0, time, 0))
//     bladesRef.current.setNextKinematicRotation(rotation)
//   })

//   const fixedRotorBlades = useFixedJoint(rotorRef, bladesRef, [
//     [0, 0, 0],
//     [0, 0, 0, 1],
//     [0, 0, 0],
//     [0, 0, 0, 1]
//   ])
  

//       <RigidBody type='kinematicPosition' colliders="ball" ref={rotorRef} >
//         <mesh
//           castShadow
//           receiveShadow
//           geometry={nodes.RotorMast.geometry}
//           // material={materials.Paint}
//           material={testMaterial}
//         />
//       </RigidBody>
      
      
//       <RigidBody type="kinematicPosition" colliders={'cuboid'} ref={bladesRef}>
//         <group position={nodes.Blades.position} quaternion={nodes.Blades.quaternion}>
//           <mesh
//             castShadow
//             receiveShadow
//             geometry={nodes.BladeBase.geometry}
//             material={materials.Paint}
//           />
//           <mesh
//             castShadow
//             receiveShadow
//             geometry={nodes.Blades.geometry}
//             material={materials.Paint}
//           />
// 



/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useState } from "react";
import { useGLTF } from "@react-three/drei";
import { RigidBody } from "@react-three/rapier";
import { useFrame } from "@react-three/fiber";
import * as THREE from 'three';

export default function Heli(props) {
  const { nodes, materials } = useGLTF("./Models/Helicopter/heliMod5.glb");

  const rotorRef = useRef()
  const bladesRef = useRef()

  const [ speed ] = useState((10.5))

  useFrame((state) => {
    const time = state.clock.getElapsedTime()
    // console.log(time)
    const position = new THREE.Vector3()

    const rotation = new THREE.Quaternion()
    rotation.setFromEuler(new THREE.Euler(0, time * speed, 0))
    bladesRef?.current.setNextKinematicRotation(rotation)
  })


  return (
    <group {...props} dispose={null}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Fuselage.geometry}
        material={materials.Paint}
        position={[0, 0, -1.151]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.WheelR.geometry}
        material={materials.Paint}
        position={[-1.05, 0.308, 1.341]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.RearWheel.geometry}
        material={materials.Paint}
        position={[0, 0.175, -5.809]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.WheelL.geometry}
        material={materials.Paint}
        position={[1.05, 0.308, 1.341]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Gun.geometry}
        material={materials.Paint}
        position={[0, 0, -1.15]}
      />
      <RigidBody  type="kinematicPosition" colliders={'cuboid'} ref={bladesRef}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.BladeBase.geometry}
          material={materials.Paint}
          position={[0.007, 3.172, 0.001]}
        />
      </RigidBody>
      
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.TailRotorMast.geometry}
        material={materials.Paint}
        position={[0.008, 1.361, -6.788]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.GlassDoor2.geometry}
        material={materials.Glass}
        position={[0, 0, -1.151]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.GlassDoor1.geometry}
        material={materials.Glass}
        position={[0, 0, -1.151]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Glass.geometry}
        material={materials.Glass}
        position={[0, 0, -1.151]}
      />
    </group>
  );
}

useGLTF.preload("/heli-modified.glb");

